// Mocks generated by Mockito 5.1.0 from annotations
// in flutter_facts_numbers/test/data/reponsitory/number_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:connectivity_plus/connectivity_plus.dart' as _i2;
import 'package:flutter_facts_numbers/common/configs/hive_config/hive_config.dart'
    as _i9;
import 'package:flutter_facts_numbers/common/untils/internet_checker.dart'
    as _i5;
import 'package:flutter_facts_numbers/data/datasources/local/number_local.dart'
    as _i7;
import 'package:flutter_facts_numbers/data/datasources/remote/number_remote.dart'
    as _i8;
import 'package:flutter_facts_numbers/data/models/number_model.dart' as _i3;
import 'package:hive_flutter/adapters.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeConnectivity_0 extends _i1.Fake implements _i2.Connectivity {}

class _FakeNumberModel_1 extends _i1.Fake implements _i3.NumberModel {}

class _FakeBox_2<E> extends _i1.Fake implements _i4.Box<E> {}

class _FakeHiveInterface_3 extends _i1.Fake implements _i4.HiveInterface {}

/// A class which mocks [InternetChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockInternetChecker extends _i1.Mock implements _i5.InternetChecker {
  MockInternetChecker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Connectivity get connectivity =>
      (super.noSuchMethod(Invocation.getter(#connectivity),
          returnValue: _FakeConnectivity_0()) as _i2.Connectivity);
  @override
  _i6.Future<bool> hasConnection() =>
      (super.noSuchMethod(Invocation.method(#hasConnection, []),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
}

/// A class which mocks [NumberLocal].
///
/// See the documentation for Mockito's code generation for more information.
class MockNumberLocal extends _i1.Mock implements _i7.NumberLocal {
  MockNumberLocal() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.NumberModel readNumber(_i4.Box<String>? box, int? number) =>
      (super.noSuchMethod(Invocation.method(#readNumber, [box, number]),
          returnValue: _FakeNumberModel_1()) as _i3.NumberModel);
  @override
  _i3.NumberModel readRandomNumber(_i4.Box<String>? box) =>
      (super.noSuchMethod(Invocation.method(#readRandomNumber, [box]),
          returnValue: _FakeNumberModel_1()) as _i3.NumberModel);
  @override
  void writeNumber(_i4.Box<String>? box, _i3.NumberModel? numberModel) =>
      super.noSuchMethod(Invocation.method(#writeNumber, [box, numberModel]),
          returnValueForMissingStub: null);
}

/// A class which mocks [NumberRemote].
///
/// See the documentation for Mockito's code generation for more information.
class MockNumberRemote extends _i1.Mock implements _i8.NumberRemote {
  MockNumberRemote() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.NumberModel> getNumber(String? type, int? number) =>
      (super.noSuchMethod(Invocation.method(#getNumber, [type, number]),
              returnValue: Future<_i3.NumberModel>.value(_FakeNumberModel_1()))
          as _i6.Future<_i3.NumberModel>);
  @override
  _i6.Future<_i3.NumberModel> getRandomNumber(String? type) =>
      (super.noSuchMethod(Invocation.method(#getRandomNumber, [type]),
              returnValue: Future<_i3.NumberModel>.value(_FakeNumberModel_1()))
          as _i6.Future<_i3.NumberModel>);
}

/// A class which mocks [HiveConfig].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveConfig extends _i1.Mock implements _i9.HiveConfig {
  MockHiveConfig() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Box<String> get dateBox =>
      (super.noSuchMethod(Invocation.getter(#dateBox),
          returnValue: _FakeBox_2<String>()) as _i4.Box<String>);
  @override
  set dateBox(_i4.Box<String>? _dateBox) =>
      super.noSuchMethod(Invocation.setter(#dateBox, _dateBox),
          returnValueForMissingStub: null);
  @override
  _i4.Box<String> get triviaBox =>
      (super.noSuchMethod(Invocation.getter(#triviaBox),
          returnValue: _FakeBox_2<String>()) as _i4.Box<String>);
  @override
  set triviaBox(_i4.Box<String>? _triviaBox) =>
      super.noSuchMethod(Invocation.setter(#triviaBox, _triviaBox),
          returnValueForMissingStub: null);
  @override
  _i4.Box<String> get mathBox =>
      (super.noSuchMethod(Invocation.getter(#mathBox),
          returnValue: _FakeBox_2<String>()) as _i4.Box<String>);
  @override
  set mathBox(_i4.Box<String>? _mathBox) =>
      super.noSuchMethod(Invocation.setter(#mathBox, _mathBox),
          returnValueForMissingStub: null);
  @override
  _i4.Box<String> get yearBox =>
      (super.noSuchMethod(Invocation.getter(#yearBox),
          returnValue: _FakeBox_2<String>()) as _i4.Box<String>);
  @override
  set yearBox(_i4.Box<String>? _yearBox) =>
      super.noSuchMethod(Invocation.setter(#yearBox, _yearBox),
          returnValueForMissingStub: null);
  @override
  _i4.HiveInterface get hive => (super.noSuchMethod(Invocation.getter(#hive),
      returnValue: _FakeHiveInterface_3()) as _i4.HiveInterface);
  @override
  _i6.Future<void> init() => (super.noSuchMethod(Invocation.method(#init, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> openBox() =>
      (super.noSuchMethod(Invocation.method(#openBox, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> dispose() =>
      (super.noSuchMethod(Invocation.method(#dispose, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
}

/// A class which mocks [Box].
///
/// See the documentation for Mockito's code generation for more information.
class MockBox<E> extends _i1.Mock implements _i4.Box<E> {
  MockBox() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<E> get values =>
      (super.noSuchMethod(Invocation.getter(#values), returnValue: <E>[])
          as Iterable<E>);
  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  bool get isOpen =>
      (super.noSuchMethod(Invocation.getter(#isOpen), returnValue: false)
          as bool);
  @override
  bool get lazy =>
      (super.noSuchMethod(Invocation.getter(#lazy), returnValue: false)
          as bool);
  @override
  Iterable<dynamic> get keys =>
      (super.noSuchMethod(Invocation.getter(#keys), returnValue: <dynamic>[])
          as Iterable<dynamic>);
  @override
  int get length =>
      (super.noSuchMethod(Invocation.getter(#length), returnValue: 0) as int);
  @override
  bool get isEmpty =>
      (super.noSuchMethod(Invocation.getter(#isEmpty), returnValue: false)
          as bool);
  @override
  bool get isNotEmpty =>
      (super.noSuchMethod(Invocation.getter(#isNotEmpty), returnValue: false)
          as bool);
  @override
  Iterable<E> valuesBetween({dynamic startKey, dynamic endKey}) =>
      (super.noSuchMethod(
          Invocation.method(
              #valuesBetween, [], {#startKey: startKey, #endKey: endKey}),
          returnValue: <E>[]) as Iterable<E>);
  @override
  E? getAt(int? index) =>
      (super.noSuchMethod(Invocation.method(#getAt, [index])) as E?);
  @override
  Map<dynamic, E> toMap() => (super.noSuchMethod(Invocation.method(#toMap, []),
      returnValue: <dynamic, E>{}) as Map<dynamic, E>);
  @override
  dynamic keyAt(int? index) =>
      super.noSuchMethod(Invocation.method(#keyAt, [index]));
  @override
  _i6.Stream<_i4.BoxEvent> watch({dynamic key}) => (super.noSuchMethod(
      Invocation.method(#watch, [], {#key: key}),
      returnValue: Stream<_i4.BoxEvent>.empty()) as _i6.Stream<_i4.BoxEvent>);
  @override
  bool containsKey(dynamic key) =>
      (super.noSuchMethod(Invocation.method(#containsKey, [key]),
          returnValue: false) as bool);
  @override
  _i6.Future<void> put(dynamic key, E? value) =>
      (super.noSuchMethod(Invocation.method(#put, [key, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> putAt(int? index, E? value) =>
      (super.noSuchMethod(Invocation.method(#putAt, [index, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> putAll(Map<dynamic, E>? entries) =>
      (super.noSuchMethod(Invocation.method(#putAll, [entries]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<int> add(E? value) =>
      (super.noSuchMethod(Invocation.method(#add, [value]),
          returnValue: Future<int>.value(0)) as _i6.Future<int>);
  @override
  _i6.Future<Iterable<int>> addAll(Iterable<E>? values) =>
      (super.noSuchMethod(Invocation.method(#addAll, [values]),
              returnValue: Future<Iterable<int>>.value(<int>[]))
          as _i6.Future<Iterable<int>>);
  @override
  _i6.Future<void> delete(dynamic key) =>
      (super.noSuchMethod(Invocation.method(#delete, [key]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> deleteAt(int? index) =>
      (super.noSuchMethod(Invocation.method(#deleteAt, [index]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> deleteAll(Iterable<dynamic>? keys) =>
      (super.noSuchMethod(Invocation.method(#deleteAll, [keys]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> compact() =>
      (super.noSuchMethod(Invocation.method(#compact, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<int> clear() => (super.noSuchMethod(Invocation.method(#clear, []),
      returnValue: Future<int>.value(0)) as _i6.Future<int>);
  @override
  _i6.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> deleteFromDisk() =>
      (super.noSuchMethod(Invocation.method(#deleteFromDisk, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> flush() => (super.noSuchMethod(Invocation.method(#flush, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
}
